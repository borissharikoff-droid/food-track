import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from datetime import datetime, date
import json

from config import BOT_TOKEN, FOOD_CATEGORIES, EXERCISES
from database import Database
from food_database import get_food_info, calculate_meal_nutrition, get_food_recommendations, get_meal_suggestions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class FitnessBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.main_menu))
        
        # –ü–∏—Ç–∞–Ω–∏–µ
        self.application.add_handler(CommandHandler("food", self.food_menu))
        self.application.add_handler(CommandHandler("add_meal", self.add_meal_command))
        self.application.add_handler(CommandHandler("daily_food", self.daily_food_command))
        
        # –í–æ–¥–∞
        self.application.add_handler(CommandHandler("water", self.water_menu))
        self.application.add_handler(CommandHandler("add_water", self.add_water_command))
        
        # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        self.application.add_handler(CommandHandler("workout", self.workout_menu))
        self.application.add_handler(CommandHandler("add_workout", self.add_workout_command))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.application.add_handler(CommandHandler("weight", self.weight_menu))
        self.application.add_handler(CommandHandler("add_weight", self.add_weight_command))
        self.application.add_handler(CommandHandler("progress", self.progress_command))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.application.add_handler(CommandHandler("tips", self.tips_command))
        self.application.add_handler(CommandHandler("vitamins", self.vitamins_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name)
        
        welcome_text = f"""
üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è! 

–ß—Ç–æ —è —É–º–µ—é:
‚úÖ –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–∏—Ç—å –≤–æ–¥—É
‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚úÖ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –≤–∏—Ç–∞–º–∏–Ω–∞–º

–ù–∞–∂–º–∏ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!
        """
        
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üçΩ –ü–∏—Ç–∞–Ω–∏–µ:
/food - –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è
/add_meal - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
/daily_food - –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è

üíß –í–æ–¥–∞:
/water - –º–µ–Ω—é –≤–æ–¥—ã
/add_water - –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É

üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
/workout - –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/add_workout - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:
/weight - –º–µ–Ω—é –≤–µ—Å–∞
/add_weight - –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Å
/progress - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
/tips - —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
/vitamins - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º

/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        """
        await update.message.reply_text(help_text)
    
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üçΩ –ü–∏—Ç–∞–Ω–∏–µ", callback_data="food_menu")],
            [InlineKeyboardButton("üíß –í–æ–¥–∞", callback_data="water_menu")],
            [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workout_menu")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress_menu")],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="tips_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    
    async def food_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data="add_meal")],
            [InlineKeyboardButton("üìã –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", callback_data="daily_food")],
            [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="food_tips")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
    
    async def add_meal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        await update.message.reply_text(
            "üçΩ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "—Ç–∏–ø_–ø—Ä–∏–µ–º–∞_–ø–∏—â–∏ –ø—Ä–æ–¥—É–∫—Ç –≥—Ä–∞–º–º—ã\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–∑–∞–≤—Ç—Ä–∞–∫ –æ–≤—Å—è–Ω–∫–∞ 100\n"
            "–æ–±–µ–¥ –∫—É—Ä–∏—Ü–∞ –≥—Ä—É–¥–∫–∞ 150\n"
            "—É–∂–∏–Ω —Ç–≤–æ—Ä–æ–≥ 200\n\n"
            "–¢–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å"
        )
    
    async def daily_food_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        meals = db.get_daily_meals(user_id)
        
        if not meals:
            await update.message.reply_text("üìã –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏")
            return
        
        total_calories = 0
        total_protein = 0
        total_carbs = 0
        total_fat = 0
        
        report = "üìã –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for meal in meals:
            meal_type, food_name, calories, protein, carbs, fat = meal[2], meal[3], meal[4], meal[5], meal[6], meal[7]
            report += f"üçΩ {meal_type.title()}: {food_name}\n"
            report += f"   –ö–∞–ª–æ—Ä–∏–∏: {calories}, –ë: {protein}–≥, –ñ: {fat}–≥, –£: {carbs}–≥\n\n"
            
            total_calories += calories
            total_protein += protein
            total_carbs += carbs
            total_fat += fat
        
        report += f"üìä –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:\n"
        report += f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories}\n"
        report += f"–ë–µ–ª–∫–∏: {total_protein:.1f}–≥\n"
        report += f"–ñ–∏—Ä—ã: {total_fat:.1f}–≥\n"
        report += f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥"
        
        await update.message.reply_text(report)
    
    async def water_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤–æ–¥—ã"""
        user_id = update.effective_user.id
        daily_water = db.get_daily_water(user_id)
        user = db.get_user(user_id)
        water_goal = user[5] if user else 2000
        
        keyboard = [
            [InlineKeyboardButton("üíß +200–º–ª", callback_data="water_200")],
            [InlineKeyboardButton("üíß +300–º–ª", callback_data="water_300")],
            [InlineKeyboardButton("üíß +500–º–ª", callback_data="water_500")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        progress = (daily_water / water_goal) * 100
        progress_bar = "‚ñà" * int(progress / 10) + "‚ñë" * (10 - int(progress / 10))
        
        text = f"üíß –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã\n\n"
        text += f"–í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {daily_water}–º–ª / {water_goal}–º–ª\n"
        text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress:.1f}%\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã:"
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def workout_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="add_workout")],
            [InlineKeyboardButton("üí™ –ö–∞—Ä–¥–∏–æ", callback_data="workout_cardio")],
            [InlineKeyboardButton("üèãÔ∏è –°–∏–ª–æ–≤—ã–µ", callback_data="workout_strength")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üèãÔ∏è –ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=reply_markup
        )
    
    async def weight_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤–µ—Å–∞"""
        keyboard = [
            [InlineKeyboardButton("‚öñÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å", callback_data="add_weight")],
            [InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞", callback_data="weight_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öñÔ∏è –ú–µ–Ω—é –≤–µ—Å–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def tips_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
        recommendations = get_food_recommendations()
        meal_suggestions = get_meal_suggestions()
        
        text = "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:\n\n"
        
        text += "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        text += "ü•© –ë–µ–ª–∫–∏: " + ", ".join(recommendations['recommended']['proteins'][:3]) + "\n"
        text += "üåæ –£–≥–ª–µ–≤–æ–¥—ã: " + ", ".join(recommendations['recommended']['carbs']) + "\n"
        text += "ü•¨ –û–≤–æ—â–∏: " + ", ".join(recommendations['recommended']['vegetables'][:3]) + "\n"
        text += "üçé –§—Ä—É–∫—Ç—ã: " + ", ".join(recommendations['recommended']['fruits'][:3]) + "\n\n"
        
        text += "‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:\n"
        text += ", ".join(recommendations['avoid']) + "\n\n"
        
        text += "üçΩ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:\n"
        text += "üåÖ –ó–∞–≤—Ç—Ä–∞–∫: " + meal_suggestions['breakfast'][0] + "\n"
        text += "üåû –û–±–µ–¥: " + meal_suggestions['lunch'][0] + "\n"
        text += "üåô –£–∂–∏–Ω: " + meal_suggestions['dinner'][0] + "\n"
        text += "üçé –ü–µ—Ä–µ–∫—É—Å: " + meal_suggestions['snacks'][0]
        
        await update.message.reply_text(text)
    
    async def vitamins_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º"""
        text = "üíä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:\n\n"
        
        text += "üî¨ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã:\n"
        text += "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω D - –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤\n"
        text += "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω B12 - –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏\n"
        text += "‚Ä¢ –û–º–µ–≥–∞-3 - –¥–ª—è –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏—è\n"
        text += "‚Ä¢ –ú–∞–≥–Ω–∏–π - –¥–ª—è –º—ã—à—Ü\n\n"
        
        text += "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–±–∞–≤–∫–∏:\n"
        text += "‚Ä¢ –†—ã–±–∏–π –∂–∏—Ä (–û–º–µ–≥–∞-3)\n"
        text += "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω D3 (2000-4000 –ú–ï)\n"
        text += "‚Ä¢ –ú–∞–≥–Ω–∏–π (200-400–º–≥)\n"
        text += "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω B-–∫–æ–º–ø–ª–µ–∫—Å\n\n"
        
        text += "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!"
        
        await update.message.reply_text(text)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        user_id = update.effective_user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        if any(word in text for word in ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '—É–∂–∏–Ω', '–ø–µ—Ä–µ–∫—É—Å']):
            await self.process_meal_input(update, text)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
        elif '–≤–æ–¥–∞' in text or '–º–ª' in text:
            await self.process_water_input(update, text)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞
        elif '–≤–µ—Å' in text and any(char.isdigit() for char in text):
            await self.process_weight_input(update, text)
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )
    
    async def process_meal_input(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        try:
            parts = text.split()
            if len(parts) >= 3:
                meal_type = parts[0]
                food_name = parts[1]
                grams = int(parts[2])
                
                nutrition = calculate_meal_nutrition(food_name, grams)
                if nutrition:
                    user_id = update.effective_user.id
                    db.add_meal(user_id, meal_type, food_name, 
                               nutrition['calories'], nutrition['protein'], 
                               nutrition['carbs'], nutrition['fat'])
                    
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {meal_type}: {food_name} ({grams}–≥)\n"
                        f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition['calories']}, "
                        f"–ë: {nutrition['protein']}–≥, "
                        f"–ñ: {nutrition['fat']}–≥, "
                        f"–£: {nutrition['carbs']}–≥"
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç–∏–ø_–ø—Ä–∏–µ–º–∞_–ø–∏—â–∏ –ø—Ä–æ–¥—É–∫—Ç –≥—Ä–∞–º–º—ã"
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö.")
    
    async def process_water_input(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–¥—ã"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            import re
            numbers = re.findall(r'\d+', text)
            if numbers:
                amount = int(numbers[0])
                user_id = update.effective_user.id
                db.add_water(user_id, amount)
                
                daily_water = db.get_daily_water(user_id)
                await update.message.reply_text(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount}–º–ª –≤–æ–¥—ã\n"
                    f"–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {daily_water}–º–ª"
                )
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")
    
    async def process_weight_input(self, update: Update, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
        try:
            import re
            numbers = re.findall(r'\d+\.?\d*', text)
            if numbers:
                weight = float(numbers[0])
                user_id = update.effective_user.id
                db.add_weight(user_id, weight)
                
                await update.message.reply_text(f"‚úÖ –í–µ—Å {weight}–∫–≥ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.")
    
    async def add_water_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã"""
        await update.message.reply_text(
            "üíß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 300"
        )
    
    async def add_workout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        await update.message.reply_text(
            "üèãÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "—Ç–∏–ø_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–∫–∞—Ä–¥–∏–æ –±–µ–≥ 30\n"
            "—Å–∏–ª–æ–≤—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –∂–∏–º_–ª–µ–∂–∞ 45\n\n"
            "–¢–∏–ø—ã: –∫–∞—Ä–¥–∏–æ, —Å–∏–ª–æ–≤—ã–µ, —Ä–∞—Å—Ç—è–∂–∫–∞"
        )
    
    async def add_weight_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞"""
        await update.message.reply_text(
            "‚öñÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5"
        )
    
    async def progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        meals = db.get_daily_meals(user_id)
        daily_water = db.get_daily_water(user_id)
        weight_history = db.get_weight_history(user_id, 1)
        
        text = "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        # –ö–∞–ª–æ—Ä–∏–∏
        total_calories = sum(meal[4] for meal in meals) if meals else 0
        text += f"üçΩ –ö–∞–ª–æ—Ä–∏–∏: {total_calories}\n"
        
        # –í–æ–¥–∞
        text += f"üíß –í–æ–¥–∞: {daily_water}–º–ª\n"
        
        # –í–µ—Å
        if weight_history:
            current_weight = weight_history[0][0]
            text += f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight}–∫–≥\n"
        
        text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        
        await update.message.reply_text(text)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.main_menu(update, context)
        elif query.data == "food_menu":
            await self.food_menu(update, context)
        elif query.data == "water_menu":
            await self.water_menu(update, context)
        elif query.data == "workout_menu":
            await self.workout_menu(update, context)
        elif query.data == "progress_menu":
            await self.weight_menu(update, context)
        elif query.data == "tips_menu":
            await self.tips_command(update, context)
        elif query.data.startswith("water_"):
            amount = int(query.data.split("_")[1])
            user_id = update.effective_user.id
            db.add_water(user_id, amount)
            await self.water_menu(update, context)
        elif query.data == "daily_food":
            await self.daily_food_command(update, context)
        elif query.data == "food_tips":
            await self.tips_command(update, context)
        elif query.data == "add_meal":
            await self.add_meal_command(update, context)
        elif query.data == "add_workout":
            await update.callback_query.message.reply_text(
                "üèãÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "—Ç–∏–ø_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "–∫–∞—Ä–¥–∏–æ –±–µ–≥ 30\n"
                "—Å–∏–ª–æ–≤—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –∂–∏–º_–ª–µ–∂–∞ 45\n\n"
                "–¢–∏–ø—ã: –∫–∞—Ä–¥–∏–æ, —Å–∏–ª–æ–≤—ã–µ, —Ä–∞—Å—Ç—è–∂–∫–∞"
            )
        elif query.data == "add_weight":
            await update.callback_query.message.reply_text(
                "‚öñÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 75.5"
            )
        elif query.data == "weight_history":
            user_id = update.effective_user.id
            history = db.get_weight_history(user_id, 7)
            
            if history:
                text = "üìà –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
                for weight, weight_date in history:
                    text += f"{weight_date}: {weight}–∫–≥\n"
                await update.callback_query.message.reply_text(text)
            else:
                await update.callback_query.message.reply_text("üìà –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –ø—É—Å—Ç–∞")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == '__main__':
    bot = FitnessBot()
    bot.run()
