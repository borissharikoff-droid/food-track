# База данных продуктов с калориями и макронутриентами
# Формат: {продукт: [калории, белки, жиры, углеводы] на 100г}

FOOD_DATABASE = {
    # Белки
    'курица грудка': [165, 31, 3.6, 0],
    'индейка грудка': [157, 30, 3.6, 0],
    'яйцо': [155, 13, 11, 1.1],
    'творог 5%': [121, 17, 5, 1.8],
    'греческий йогурт': [59, 10, 0.4, 3.6],
    'рыба лосось': [208, 25, 12, 0],
    'тунец': [144, 30, 1, 0],
    
    # Углеводы
    'гречка': [343, 13, 3.4, 72],
    'овсянка': [389, 17, 6.9, 66],
    'рис белый': [130, 2.7, 0.3, 28],
    'картофель': [77, 2, 0.1, 17],
    'хлеб ржаной': [259, 8.5, 3.3, 48],
    
    # Жиры
    'орехи грецкие': [654, 15, 65, 14],
    'авокадо': [160, 2, 15, 9],
    'оливковое масло': [884, 0, 100, 0],
    'семечки подсолнуха': [584, 21, 51, 20],
    
    # Овощи
    'брокколи': [34, 2.8, 0.4, 7],
    'шпинат': [23, 2.9, 0.4, 3.6],
    'морковь': [41, 0.9, 0.2, 10],
    'огурцы': [16, 0.7, 0.1, 3.6],
    'помидоры': [18, 0.9, 0.2, 3.9],
    
    # Фрукты
    'яблоко': [52, 0.3, 0.2, 14],
    'банан': [89, 1.1, 0.3, 23],
    'апельсин': [47, 0.9, 0.1, 12],
    'ягоды клубника': [32, 0.7, 0.3, 8],
    
    # Избегать
    'шоколад молочный': [545, 7.5, 31, 61],
    'чипсы': [536, 7, 35, 53],
    'газировка': [42, 0, 0, 11],
    'печенье': [502, 5.4, 25, 65],
    
    # Напитки
    'кофе черный': [2, 0.3, 0, 0],
    'чай черный': [1, 0, 0, 0.2],
    'вода': [0, 0, 0, 0],
}

def get_food_info(food_name):
    """Получение информации о продукте"""
    food_name_lower = food_name.lower().strip()
    
    # Поиск точного совпадения
    if food_name_lower in FOOD_DATABASE:
        return FOOD_DATABASE[food_name_lower]
    
    # Поиск частичного совпадения
    for food, nutrition in FOOD_DATABASE.items():
        if food_name_lower in food or food in food_name_lower:
            return nutrition
    
    return None

def calculate_meal_nutrition(food_name, grams=100):
    """Подсчет калорий и макронутриентов для порции"""
    nutrition = get_food_info(food_name)
    if nutrition:
        multiplier = grams / 100
        return {
            'calories': int(nutrition[0] * multiplier),
            'protein': round(nutrition[1] * multiplier, 1),
            'fat': round(nutrition[2] * multiplier, 1),
            'carbs': round(nutrition[3] * multiplier, 1)
        }
    return None

def get_food_recommendations():
    """Получение рекомендаций по питанию"""
    return {
        'recommended': {
            'proteins': ['курица грудка', 'индейка грудка', 'яйцо', 'творог 5%', 'рыба лосось'],
            'carbs': ['гречка', 'овсянка', 'рис белый'],
            'vegetables': ['брокколи', 'шпинат', 'морковь', 'огурцы', 'помидоры'],
            'fruits': ['яблоко', 'банан', 'апельсин', 'ягоды клубника']
        },
        'avoid': ['шоколад молочный', 'чипсы', 'газировка', 'печенье']
    }

def get_meal_suggestions():
    """Предложения приемов пищи"""
    return {
        'breakfast': [
            'Овсянка с ягодами и орехами',
            'Яйца с овощами',
            'Греческий йогурт с фруктами'
        ],
        'lunch': [
            'Куриная грудка с гречкой и овощами',
            'Рыба с рисом и салатом',
            'Индейка с картофелем'
        ],
        'dinner': [
            'Творог с фруктами',
            'Овощной салат с яйцом',
            'Греческий йогурт с орехами'
        ],
        'snacks': [
            'Яблоко',
            'Орехи (30г)',
            'Овощи с хумусом'
        ]
    }
